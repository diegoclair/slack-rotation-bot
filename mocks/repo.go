// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/repo.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=internal/domain/contract/repo.go -destination=mocks/repo.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	contract "github.com/diegoclair/slack-rotation-bot/internal/domain/contract"
	entity "github.com/diegoclair/slack-rotation-bot/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDataManager is a mock of DataManager interface.
type MockDataManager struct {
	ctrl     *gomock.Controller
	recorder *MockDataManagerMockRecorder
	isgomock struct{}
}

// MockDataManagerMockRecorder is the mock recorder for MockDataManager.
type MockDataManagerMockRecorder struct {
	mock *MockDataManager
}

// NewMockDataManager creates a new mock instance.
func NewMockDataManager(ctrl *gomock.Controller) *MockDataManager {
	mock := &MockDataManager{ctrl: ctrl}
	mock.recorder = &MockDataManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataManager) EXPECT() *MockDataManagerMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockDataManager) Channel() contract.ChannelRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(contract.ChannelRepo)
	return ret0
}

// Channel indicates an expected call of Channel.
func (mr *MockDataManagerMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockDataManager)(nil).Channel))
}

// Scheduler mocks base method.
func (m *MockDataManager) Scheduler() contract.SchedulerRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheduler")
	ret0, _ := ret[0].(contract.SchedulerRepo)
	return ret0
}

// Scheduler indicates an expected call of Scheduler.
func (mr *MockDataManagerMockRecorder) Scheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheduler", reflect.TypeOf((*MockDataManager)(nil).Scheduler))
}

// User mocks base method.
func (m *MockDataManager) User() contract.UserRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(contract.UserRepo)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockDataManagerMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockDataManager)(nil).User))
}

// WithTransaction mocks base method.
func (m *MockDataManager) WithTransaction(ctx context.Context, fn func(contract.DataManager) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockDataManagerMockRecorder) WithTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockDataManager)(nil).WithTransaction), ctx, fn)
}

// MockChannelRepo is a mock of ChannelRepo interface.
type MockChannelRepo struct {
	ctrl     *gomock.Controller
	recorder *MockChannelRepoMockRecorder
	isgomock struct{}
}

// MockChannelRepoMockRecorder is the mock recorder for MockChannelRepo.
type MockChannelRepoMockRecorder struct {
	mock *MockChannelRepo
}

// NewMockChannelRepo creates a new mock instance.
func NewMockChannelRepo(ctrl *gomock.Controller) *MockChannelRepo {
	mock := &MockChannelRepo{ctrl: ctrl}
	mock.recorder = &MockChannelRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelRepo) EXPECT() *MockChannelRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChannelRepo) Create(channel *entity.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChannelRepoMockRecorder) Create(channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChannelRepo)(nil).Create), channel)
}

// GetActiveChannels mocks base method.
func (m *MockChannelRepo) GetActiveChannels() ([]*entity.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveChannels")
	ret0, _ := ret[0].([]*entity.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveChannels indicates an expected call of GetActiveChannels.
func (mr *MockChannelRepoMockRecorder) GetActiveChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveChannels", reflect.TypeOf((*MockChannelRepo)(nil).GetActiveChannels))
}

// GetByID mocks base method.
func (m *MockChannelRepo) GetByID(id int64) (*entity.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockChannelRepoMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockChannelRepo)(nil).GetByID), id)
}

// GetBySlackID mocks base method.
func (m *MockChannelRepo) GetBySlackID(slackChannelID string) (*entity.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlackID", slackChannelID)
	ret0, _ := ret[0].(*entity.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlackID indicates an expected call of GetBySlackID.
func (mr *MockChannelRepoMockRecorder) GetBySlackID(slackChannelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlackID", reflect.TypeOf((*MockChannelRepo)(nil).GetBySlackID), slackChannelID)
}

// Update mocks base method.
func (m *MockChannelRepo) Update(channel *entity.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockChannelRepoMockRecorder) Update(channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChannelRepo)(nil).Update), channel)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
	isgomock struct{}
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// ClearLastPresenter mocks base method.
func (m *MockUserRepo) ClearLastPresenter(channelID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearLastPresenter", channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearLastPresenter indicates an expected call of ClearLastPresenter.
func (mr *MockUserRepoMockRecorder) ClearLastPresenter(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearLastPresenter", reflect.TypeOf((*MockUserRepo)(nil).ClearLastPresenter), channelID)
}

// Create mocks base method.
func (m *MockUserRepo) Create(user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoMockRecorder) Create(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepo)(nil).Create), user)
}

// Delete mocks base method.
func (m *MockUserRepo) Delete(userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepoMockRecorder) Delete(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepo)(nil).Delete), userID)
}

// GetActiveUsersByChannel mocks base method.
func (m *MockUserRepo) GetActiveUsersByChannel(channelID int64) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveUsersByChannel", channelID)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveUsersByChannel indicates an expected call of GetActiveUsersByChannel.
func (mr *MockUserRepoMockRecorder) GetActiveUsersByChannel(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveUsersByChannel", reflect.TypeOf((*MockUserRepo)(nil).GetActiveUsersByChannel), channelID)
}

// GetByChannelAndSlackID mocks base method.
func (m *MockUserRepo) GetByChannelAndSlackID(channelID int64, slackUserID string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByChannelAndSlackID", channelID, slackUserID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByChannelAndSlackID indicates an expected call of GetByChannelAndSlackID.
func (mr *MockUserRepoMockRecorder) GetByChannelAndSlackID(channelID, slackUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByChannelAndSlackID", reflect.TypeOf((*MockUserRepo)(nil).GetByChannelAndSlackID), channelID, slackUserID)
}

// GetLastPresenter mocks base method.
func (m *MockUserRepo) GetLastPresenter(channelID int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPresenter", channelID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPresenter indicates an expected call of GetLastPresenter.
func (mr *MockUserRepoMockRecorder) GetLastPresenter(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPresenter", reflect.TypeOf((*MockUserRepo)(nil).GetLastPresenter), channelID)
}

// SetLastPresenter mocks base method.
func (m *MockUserRepo) SetLastPresenter(userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastPresenter", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastPresenter indicates an expected call of SetLastPresenter.
func (mr *MockUserRepoMockRecorder) SetLastPresenter(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastPresenter", reflect.TypeOf((*MockUserRepo)(nil).SetLastPresenter), userID)
}

// MockSchedulerRepo is a mock of SchedulerRepo interface.
type MockSchedulerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerRepoMockRecorder
	isgomock struct{}
}

// MockSchedulerRepoMockRecorder is the mock recorder for MockSchedulerRepo.
type MockSchedulerRepoMockRecorder struct {
	mock *MockSchedulerRepo
}

// NewMockSchedulerRepo creates a new mock instance.
func NewMockSchedulerRepo(ctrl *gomock.Controller) *MockSchedulerRepo {
	mock := &MockSchedulerRepo{ctrl: ctrl}
	mock.recorder = &MockSchedulerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerRepo) EXPECT() *MockSchedulerRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSchedulerRepo) Create(scheduler *entity.Scheduler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", scheduler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSchedulerRepoMockRecorder) Create(scheduler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSchedulerRepo)(nil).Create), scheduler)
}

// Delete mocks base method.
func (m *MockSchedulerRepo) Delete(channelID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSchedulerRepoMockRecorder) Delete(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSchedulerRepo)(nil).Delete), channelID)
}

// GetByChannelID mocks base method.
func (m *MockSchedulerRepo) GetByChannelID(channelID int64) (*entity.Scheduler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByChannelID", channelID)
	ret0, _ := ret[0].(*entity.Scheduler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByChannelID indicates an expected call of GetByChannelID.
func (mr *MockSchedulerRepoMockRecorder) GetByChannelID(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByChannelID", reflect.TypeOf((*MockSchedulerRepo)(nil).GetByChannelID), channelID)
}

// GetEnabled mocks base method.
func (m *MockSchedulerRepo) GetEnabled() ([]*entity.Scheduler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabled")
	ret0, _ := ret[0].([]*entity.Scheduler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabled indicates an expected call of GetEnabled.
func (mr *MockSchedulerRepoMockRecorder) GetEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabled", reflect.TypeOf((*MockSchedulerRepo)(nil).GetEnabled))
}

// SetEnabled mocks base method.
func (m *MockSchedulerRepo) SetEnabled(channelID int64, enabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEnabled", channelID, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEnabled indicates an expected call of SetEnabled.
func (mr *MockSchedulerRepoMockRecorder) SetEnabled(channelID, enabled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnabled", reflect.TypeOf((*MockSchedulerRepo)(nil).SetEnabled), channelID, enabled)
}

// Update mocks base method.
func (m *MockSchedulerRepo) Update(scheduler *entity.Scheduler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", scheduler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSchedulerRepoMockRecorder) Update(scheduler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSchedulerRepo)(nil).Update), scheduler)
}
